Parte 1

Testes

1 - Deve criar um pedido com 3 produtos (com descrição, preço e quantidade) e calcular o valor total OK
2 - Deve criar um pedido com 3 produtos, associar um cupom de desconto e calcular o total (percentual sobre o total do pedido) OK
3 - Não deve criar um pedido com cpf inválido (lançar algum tipo de erro) OK

Sugestões

Faça a modelagem da forma que desejar e não se preocupe por enquanto, vamos implementar juntos na aula seguinte com influências de DDD e Clean Architecture
Utilize a sua linguagem e biblioteca de teste de sua preferência
Devem existir no mínimo 2 arquivos, um de teste e outro que é a aplicação
Como mecanismo de persistência você pode utilizar um banco de dados, um array em memória, um arquivo, qualquer coisa que desejar
Como entrada você pode utilizar uma API HTTP, um CLI ou qualquer outro mecanismo que permita a entrada dos dados
Tente seguir com disciplina, criando primeiro um teste que falha, depois fazendo e teste passar e refatorando

Parte 2

Testes

1 - Não deve aplicar cupom de desconto expirado OK
2 - Ao fazer um pedido, a quantidade de um item não pode ser negativa OK
3 - Ao fazer um pedido, o mesmo item não pode ser informado mais de uma vez OK
4 - Nenhuma dimensão do item pode ser negativa OK
5 - O peso do item não pode ser negativo OK
6 - Deve calcular o valor do frete com base nas dimensões (altura, largura e profundidade em cm) e o peso dos produtos (em kg) OK
7 - Deve retornar o preço mínimo de frete caso ele seja superior ao valor calculado

Parte 3

1 - Checkout, salvando dos dados no banco OK
2 - Gerar o código/número de série do pedido (AAAASSSSSSSS) OK
3 - Simulação de frete OK
4 - Validar cupom de desconto OK
